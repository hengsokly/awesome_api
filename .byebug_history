continue
tokens = session.login
session = JWTSessions::Session.new(payload: payload, refresh_by_access_allowed: true)
payload  = { user_id: user.id }
user.authenticate(params[:password])
user = User.find_by!(email: params[:email])
exit/exit
continue
conitnue
raise 404
params
continue
params
params[:email]
continue
user.authenticate('MyString')
user.save
user.password="MyString"
user.password 
user.authenticate(my_password)
my_password = BCrypt::Password.new("$2a$12$r0uLiXKuY5qgJL8Loc.sEO7wUXeXxthHXE8Zo3VmAsD9RLIMSOhhu")
user.authenticate(my_password)
my_password = BCrypt::Password.create("MyString")
user.authenticate()
user.password_digest
user
continue
a=='MyString'
a==my_password
a
my_password
a==my_password
a
a=BCrypt::Password.new("$2a$12$VHO1RadX.35CP5cEpkq.L.ILLP3AjbCwFh5XLp.5qpT5d.SsOqsc6")
my_password
user.authenticate(my_password)
user = User.find_by!(email: params[:email])
my_password = BCrypt::Password.create("MyString")
continue
 user.authenticate(params[:password])
user = User.find_by!(email: params[:email])
params
continue
user.authenticate('MyString')
user.password_digest
user.password
user.authenticate('MyString')
user.authenticate('password')
user.authenticate(params[:password])
params[:password]
user.authenticate(params[:password])
user = User.find_by!(email: params[:email])
params[:email]
params[:email'
params
